# yaml-language-server: $schema=maru2.schema.json
inputs:
  text:
    description: Text to echo
    default: "Hello, world!"
    required: true
  short:
    description: Controls whether network tests are run
    default: false

tasks:
  echo:
    - run: echo "${{ input "text" }}"

  test:
    - run: |
        go test -race -cover -coverprofile=coverage.out -failfast -timeout 3m -short=${{ input "short" }} ./...

  hello-world:
    - run: echo "Hello, World!"

  benchmark:
    - run: hyperfine './bin/maru2 hello-world' 'make hello-world' -N --warmup 10

  complex:
    - uses: echo
      with:
        text: input was '${{ input "text" }}'
    - run: |
        echo "$INPUT_TEXT"
        echo "${{ input "text" }}"
    - run: echo "bar=baz" >> $MARU2_OUTPUT
      id: foo
    - run: |
        echo "got: ${{ from "foo" "bar" }}"

  release-nightly:
    - run: |
        mkdir -p bin

        title() {
            string="$1"
            first_char=$(printf %.1s "$string" | tr '[:lower:]' '[:upper:]')
            rest_of_string=$(printf %s "$string" | cut -c 2-)
            printf '%s%s\n' "$first_char" "$rest_of_string"
        }

        oses=(linux darwin)
        arches=(amd64 arm64)
        for os in "${oses[@]}"; do
          for arch in "${arches[@]}"; do
            if [[ "${os}/${arch}" == "darwin/amd64" ]]; then
              continue
            fi

            bin="maru2_$(title "$os")_"
            if [[ "${arch}" == "amd64" ]]; then
              bin+="x86_64"
            else
              bin+="${arch}"
            fi
            echo "build $(title "$os")/$(arch) to bin/$bin"

            export CGO_ENABLED=0

            GOARCH="$arch" GOOS="$os" \
            go build -o "bin/$bin" -ldflags="-s -w" -trimpath ./cmd/maru2
          done
        done
      shell: bash
